Benchmark Conditions: => Both parsers non thread-safe, have sb and state as instance vars, but only sb passed to handle methods
                         (SimpleCsv should be back to what it was in the orig List<String> benchmarks)

Benchmark                                                            Mode   Samples         Mean   Mean error    Units
-- File based Benchmarks --
n.q.s.b.Benchmark.benchLargeCsvFromFileCsvReaderXMultiLine           avgt        30     1881.731       14.234    ms/op
n.q.s.b.Benchmark.benchLargeCsvFromFileCsvReaderSimple               avgt        30     1480.579       19.311    ms/op

n.q.s.b.Benchmark.benchLargeCsvFromFileMultiLine                     avgt        30     1879.999       18.527    ms/op
n.q.s.b.Benchmark.benchLargeCsvFromFileSimple                        avgt        30     1458.819       11.985    ms/op

n.q.s.b.Benchmark.benchLargeCsvFromFileMultiLineStrictQuotesTrim     avgt        30     1897.896       19.877    ms/op
n.q.s.b.Benchmark.benchLargeCsvFromFileSimpleStrictQuotesTrim        avgt        30     1590.070       17.261    ms/op

n.q.s.b.Benchmark.benchSmallCsvFromFileMultiLine                     avgt        30      670.508       15.171    us/op
n.q.s.b.Benchmark.benchSmallCsvFromFileSimple                        avgt        30      570.619       23.775    us/op

n.q.s.b.Benchmark.benchSmallCsvFromFileMultiLineStrictQuotesTrim     avgt        30      831.482       98.630    us/op
n.q.s.b.Benchmark.benchSmallCsvFromFileSimpleStrictQuotesTrim        avgt        30      589.150       19.204    us/op

-- In memory string based Benchmarks --

n.q.s.b.Benchmark.benchLongInMemoryStringMultiLine                   avgt        30       10.499        0.346    us/op
n.q.s.b.Benchmark.benchLongInMemoryStringSimple                      avgt        30        7.189        0.229    us/op

n.q.s.b.Benchmark.benchRetainQuotesTrimWhitespaceMultiLine           avgt        30      704.056       30.197    ns/op
n.q.s.b.Benchmark.benchRetainQuotesTrimWhitespaceSimple              avgt        30      528.756       29.580    ns/op

n.q.s.b.Benchmark.benchStrictQuotesTrimWhitespaceMultiLine           avgt        30      719.892       26.895    ns/op
n.q.s.b.Benchmark.benchStrictQuotesTrimWhitespaceSimple              avgt        30      479.892       10.435    ns/op



Conclusion: Both were (mostly) slower than the original List<String> benchmarks; many in the error margin but LargeCsv shows a
difference outside the error range (~2% difference from orig List<String> benchmarks)

=====================================================================================


Benchmark Conditions: => Both parsers changed to be non thread-safe, but only State is an instance variable so it does
                         have to be passed into the various "handle" methods during parsing

Benchmark                                                            Mode   Samples         Mean   Mean error    Units
-- File based Benchmarks --
n.q.s.b.Benchmark.benchLargeCsvFromFileCsvReaderXMultiLine           avgt        30     1926.080       15.403    ms/op
n.q.s.b.Benchmark.benchLargeCsvFromFileCsvReaderSimple               avgt        30     1622.362        9.076    ms/op

n.q.s.b.Benchmark.benchLargeCsvFromFileMultiLine                     avgt        30     1947.878       19.693    ms/op
n.q.s.b.Benchmark.benchLargeCsvFromFileSimple                        avgt        30     1497.430        8.695    ms/op

n.q.s.b.Benchmark.benchLargeCsvFromFileMultiLineStrictQuotesTrim     avgt        30     1998.108       22.614    ms/op
n.q.s.b.Benchmark.benchLargeCsvFromFileSimpleStrictQuotesTrim        avgt        30     1649.585       20.380    ms/op

n.q.s.b.Benchmark.benchSmallCsvFromFileMultiLine                     avgt        30      684.883       25.713    us/op
n.q.s.b.Benchmark.benchSmallCsvFromFileSimple                        avgt        30      569.070       13.152    us/op

n.q.s.b.Benchmark.benchSmallCsvFromFileMultiLineStrictQuotesTrim     avgt        30      732.276       22.515    us/op
n.q.s.b.Benchmark.benchSmallCsvFromFileSimpleStrictQuotesTrim        avgt        30      608.876       18.656    us/op

-- In memory string based Benchmarks --

n.q.s.b.Benchmark.benchLongInMemoryStringMultiLine                   avgt        30       10.973        0.397    us/op
n.q.s.b.Benchmark.benchLongInMemoryStringSimple                      avgt        30        7.359        0.323    us/op

n.q.s.b.Benchmark.benchRetainQuotesTrimWhitespaceMultiLine           avgt        30      696.786       22.551    ns/op
n.q.s.b.Benchmark.benchRetainQuotesTrimWhitespaceSimple              avgt        30      502.817       18.189    ns/op

n.q.s.b.Benchmark.benchStrictQuotesTrimWhitespaceMultiLine           avgt        30      711.048       17.559    ns/op
n.q.s.b.Benchmark.benchStrictQuotesTrimWhitespaceSimple              avgt        30      585.878       18.917    ns/op

Conclusion:
No difference for MultiLine - about the same as previous run.
SimpleCsv parser not as good as the original thread safe version that has sb and state both as instance vars, but only passes sb to handle methods.


=====================================================================================


Benchmark Conditions: => Simple changed to be fully thread-safe; MultiLine changed to not be (sb and state instance vars)

Benchmark                                                            Mode   Samples         Mean   Mean error    Units
-- File based Benchmarks --
n.q.s.b.Benchmark.benchLargeCsvFromFileCsvReaderXMultiLine           avgt        30     1926.231       23.345    ms/op
n.q.s.b.Benchmark.benchLargeCsvFromFileCsvReaderSimple               avgt        30     1613.185       10.605    ms/op

n.q.s.b.Benchmark.benchLargeCsvFromFileMultiLine                     avgt        30     1947.844       16.272    ms/op
n.q.s.b.Benchmark.benchLargeCsvFromFileSimple                        avgt        30     1625.111       15.473    ms/op

n.q.s.b.Benchmark.benchLargeCsvFromFileMultiLineStrictQuotesTrim     avgt        30     1971.650       33.937    ms/op
n.q.s.b.Benchmark.benchLargeCsvFromFileSimpleStrictQuotesTrim        avgt        30     1667.774       10.937    ms/op

n.q.s.b.Benchmark.benchSmallCsvFromFileMultiLine                     avgt        30      659.889       15.907    us/op
n.q.s.b.Benchmark.benchSmallCsvFromFileSimple                        avgt        30      574.073       17.839    us/op

n.q.s.b.Benchmark.benchSmallCsvFromFileMultiLineStrictQuotesTrim     avgt        30      757.394       24.467    us/op
n.q.s.b.Benchmark.benchSmallCsvFromFileSimpleStrictQuotesTrim        avgt        30      608.013       13.810    us/op

-- In memory string based Benchmarks --

n.q.s.b.Benchmark.benchLongInMemoryStringMultiLine                   avgt        30        9.905        0.354    us/op
n.q.s.b.Benchmark.benchLongInMemoryStringSimple                      avgt        30        7.389        0.200    us/op

n.q.s.b.Benchmark.benchRetainQuotesTrimWhitespaceMultiLine           avgt        30      696.620       40.441    ns/op
n.q.s.b.Benchmark.benchRetainQuotesTrimWhitespaceSimple              avgt        30      526.455        8.520    ns/op

n.q.s.b.Benchmark.benchStrictQuotesTrimWhitespaceMultiLine           avgt        30      719.922       31.879    ns/op
n.q.s.b.Benchmark.benchStrictQuotesTrimWhitespaceSimple              avgt        30      556.734       15.880    ns/op

Analysis: 
Simple threadsafe vs not:
1613.185 / 1439.067 = 1.12
1625.111 / 1439.573 = 1.13
1667.774 / 1545.539 = 1.08
574.073 / 560.375 = 1.02
608.013 / 572.812 = 1.06
7.389 / 6.943 = 1.06
526.455 / 486.966 = 1.08
556.734 / 468.403 = 1.19

MultiLine threadsafe vs not:
1940.717 / 1926.231 = 1.01
1926.570 / 1947.844
1948.615 / 1971.650
682.492 / 659.889
744.009 / 757.394
10.203 / 9.905
674.836 / 696.620
696.863 / 719.922


Conclusion: Thread safety for SimpleCsv seems to impose about a 8%-10% performance penalty (2% to 18% was the rang)
Thread safety vs. non-thread safety was a wash for MultiLine parser

=====================================================================================


Benchmark Conditions: => after changing MultLine parsing logic to match revised code from footloose
                         MultiLine = threadsafe; Simple = not threadsafe
Benchmark                                                            Mode   Samples         Mean   Mean error    Units
-- File based Benchmarks --
n.q.s.b.Benchmark.benchLargeCsvFromFileCsvReaderXMultiLine           avgt        30     1940.717       13.465    ms/op
n.q.s.b.Benchmark.benchLargeCsvFromFileCsvReaderSimple               avgt        30     1439.067       11.336    ms/op

n.q.s.b.Benchmark.benchLargeCsvFromFileMultiLine                     avgt        30     1926.570       15.208    ms/op
n.q.s.b.Benchmark.benchLargeCsvFromFileSimple                        avgt        30     1439.573       14.208    ms/op

n.q.s.b.Benchmark.benchLargeCsvFromFileMultiLineStrictQuotesTrim     avgt        30     1948.615       18.417    ms/op
n.q.s.b.Benchmark.benchLargeCsvFromFileSimpleStrictQuotesTrim        avgt        30     1545.539       24.450    ms/op

n.q.s.b.Benchmark.benchSmallCsvFromFileMultiLine                     avgt        30      682.492       24.906    us/op
n.q.s.b.Benchmark.benchSmallCsvFromFileSimple                        avgt        30      560.375       34.556    us/op

n.q.s.b.Benchmark.benchSmallCsvFromFileMultiLineStrictQuotesTrim     avgt        30      744.009       68.221    us/op
n.q.s.b.Benchmark.benchSmallCsvFromFileSimpleStrictQuotesTrim        avgt        30      572.812       14.605    us/op

-- In memory string based Benchmarks --

n.q.s.b.Benchmark.benchLongInMemoryStringMultiLine                   avgt        30       10.203        0.411    us/op
n.q.s.b.Benchmark.benchLongInMemoryStringSimple                      avgt        30        6.943        0.311    us/op

n.q.s.b.Benchmark.benchRetainQuotesTrimWhitespaceMultiLine           avgt        30      674.836       17.258    ns/op
n.q.s.b.Benchmark.benchRetainQuotesTrimWhitespaceSimple              avgt        30      486.966       10.636    ns/op

n.q.s.b.Benchmark.benchStrictQuotesTrimWhitespaceMultiLine           avgt        30      696.863       23.357    ns/op
n.q.s.b.Benchmark.benchStrictQuotesTrimWhitespaceSimple              avgt        30      468.403       12.398    ns/op


Conclusion: Overall, this change makes the MultiLine parser slighly slower.  In some cases it was a wash (within error tolerance),
but for the LargeCsvFromFile runs, it showed:
1941 / 1846 = 1.051
1927 / 1825 = 1.056
so it looks to be about 5% slower and difference is outside the mean error bars

=====================================================================================


Benchmark Conditions: => after changing fully from String[] to List<String>
Benchmark                                                            Mode   Samples         Mean   Mean error    Units
-- File based Benchmarks --
n.q.s.b.Benchmark.benchLargeCsvFromFileCsvReaderXMultiLine           avgt        30     1845.998       12.271    ms/op
n.q.s.b.Benchmark.benchLargeCsvFromFileCsvReaderSimple               avgt        30     1443.287       22.330    ms/op

n.q.s.b.Benchmark.benchLargeCsvFromFileMultiLine                     avgt        30     1825.219       14.068    ms/op
n.q.s.b.Benchmark.benchLargeCsvFromFileSimple                        avgt        30     1423.681       14.643    ms/op

n.q.s.b.Benchmark.benchLargeCsvFromFileMultiLineStrictQuotesTrim     avgt        30     1950.154        9.943    ms/op
n.q.s.b.Benchmark.benchLargeCsvFromFileSimpleStrictQuotesTrim        avgt        30     1550.182       18.858    ms/op

n.q.s.b.Benchmark.benchSmallCsvFromFileMultiLine                     avgt        30      679.266       29.377    us/op
n.q.s.b.Benchmark.benchSmallCsvFromFileSimple                        avgt        30      551.006       17.880    us/op

n.q.s.b.Benchmark.benchSmallCsvFromFileMultiLineStrictQuotesTrim     avgt        30      735.115       23.952    us/op
n.q.s.b.Benchmark.benchSmallCsvFromFileSimpleStrictQuotesTrim        avgt        30      586.032       28.576    us/op

-- In memory string based Benchmarks --

n.q.s.b.Benchmark.benchLongInMemoryStringMultiLine                   avgt        30       11.110        0.413    us/op
n.q.s.b.Benchmark.benchLongInMemoryStringSimple                      avgt        30        6.924        0.205    us/op

n.q.s.b.Benchmark.benchRetainQuotesTrimWhitespaceMultiLine           avgt        30      662.461       21.257    ns/op
n.q.s.b.Benchmark.benchRetainQuotesTrimWhitespaceSimple              avgt        30      499.929       14.794    ns/op

n.q.s.b.Benchmark.benchStrictQuotesTrimWhitespaceMultiLine           avgt        30      707.684       17.570    ns/op
n.q.s.b.Benchmark.benchStrictQuotesTrimWhitespaceSimple              avgt        30      481.765       14.652    ns/op

Conclusion: using List<String> rather than String[] is between 1.5 to 7.5% faster

=====================================================================================

Benchmark Conditions:
System: 64-bit Linux laptop, 8 cpu, 16 GB RAM
Date: Sat May 24, 2014
Git revision: 8ad9ec03275d29e1dbdacd904785547c76d85ef0, 'v2.0bench' branch

Benchmark                                                            Mode   Samples         Mean   Mean error    Units  Comparison
-- File based Benchmarks --
n.q.s.b.Benchmark.benchLargeCsvFromFileCsvReaderXMultiLine           avgt        30     1896.081       13.204    ms/op  
n.q.s.b.Benchmark.benchLargeCsvFromFileCsvReaderSimple               avgt        30     1467.456        6.564    ms/op  1896 / 1467 = 1.29

n.q.s.b.Benchmark.benchLargeCsvFromFileMultiLine                     avgt        30     1848.153       16.322    ms/op  
n.q.s.b.Benchmark.benchLargeCsvFromFileSimple                        avgt        30     1438.170       12.011    ms/op  1848 / 1438 = 1.29

n.q.s.b.Benchmark.benchLargeCsvFromFileMultiLineStrictQuotesTrim     avgt        30     2038.730       46.057    ms/op  
n.q.s.b.Benchmark.benchLargeCsvFromFileSimpleStrictQuotesTrim        avgt        30     1557.465       17.896    ms/op  2039 / 1557 = 1.31

n.q.s.b.Benchmark.benchSmallCsvFromFileMultiLine                     avgt        30      692.025       23.737    us/op
n.q.s.b.Benchmark.benchSmallCsvFromFileSimple                        avgt        30      570.339       27.518    us/op  692 / 570   = 1.21

n.q.s.b.Benchmark.benchSmallCsvFromFileMultiLineStrictQuotesTrim     avgt        30      765.099       41.746    us/op  
n.q.s.b.Benchmark.benchSmallCsvFromFileSimpleStrictQuotesTrim        avgt        30      604.994       24.254    us/op  765 / 605   = 1.26


-- In memory string based Benchmarks --

n.q.s.b.Benchmark.benchLongInMemoryStringMultiLine                   avgt        30       11.119        0.421    us/op
n.q.s.b.Benchmark.benchLongInMemoryStringSimple                      avgt        30        7.409        0.744    us/op  11.1 / 7.4  = 1.5

n.q.s.b.Benchmark.benchRetainQuotesTrimWhitespaceMultiLine           avgt        30      704.882       32.498    ns/op
n.q.s.b.Benchmark.benchRetainQuotesTrimWhitespaceSimple              avgt        30      522.102       15.755    ns/op  705 / 522   = 1.35

n.q.s.b.Benchmark.benchStrictQuotesTrimWhitespaceMultiLine           avgt        30      770.679       34.138    ns/op
n.q.s.b.Benchmark.benchStrictQuotesTrimWhitespaceSimple              avgt        30      519.076       22.409    ns/op  771 / 519   = 1.49

